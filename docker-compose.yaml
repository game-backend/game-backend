version: '3.8'

services:
  players-management:
    build:
      context: .
      dockerfile: ./apps/players-management/devops/Dockerfile
    container_name: players-management
    ports:
      - "3001:3000"
    depends_on:
      - mongodb
    networks:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV}
      PLAYERS_REPO_HOST: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/playersDB?authSource=admin
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN}

  game-scores:
    build:
      context: .
      dockerfile: ./apps/game-scores/devops/Dockerfile
    container_name: game-scores
    ports:
      - "3002:3000"
    depends_on:
      - kafka
      - mongodb
    networks:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_HOST: kafka:9092
      KAFKA_RETRIES: 10
      KAFKA_INITIAL_RETRY_TIME: 500
      KAFKA_RETRY_MULTIPLIER: 2
      KAFKA_MAX_RETRY_TIME: 30000
      SCORES_REPO_HOST: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/scoresDB?authSource=admin
      PLAYERS_MANAGEMENT_SERVICE_HOST: http://players-management:3000
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN}
      TOPIC_SCORE_SUBMITTED: score.submitted


  leaderboard:
    build:
      context: .
      dockerfile: ./apps/leaderboard/devops/Dockerfile
    container_name: leaderboard
    ports:
      - "3003:3000"
    depends_on:
      - kafka
      - redis
    networks:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_HOST: kafka:9092
      KAFKA_RETRIES: 10
      KAFKA_INITIAL_RETRY_TIME: 500
      KAFKA_RETRY_MULTIPLIER: 2
      KAFKA_MAX_RETRY_TIME: 30000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PLAYERS_MANAGEMENT_SERVICE_HOST: http://players-management:3000
      GAME_SCORES_SERVICE_HOST: http://game-scores:3000
      LEADERBOARD_SERVICE_KAFKA_GROUP_ID: leaderboard-consumers
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN}
      TOPIC_SCORE_SUBMITTED: score.submitted
      REDIS_KEY_LEADERBOARD: leaderboard
  log-management:
    build:
      context: .
      dockerfile: ./apps/log-management/devops/Dockerfile
    container_name: log-management
    ports:
      - "3004:3000"
    depends_on:
      - kafka
      - redis
      - mongodb
    networks:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_HOST: kafka:9092
      KAFKA_RETRIES: 10
      KAFKA_INITIAL_RETRY_TIME: 500
      KAFKA_RETRY_MULTIPLIER: 2
      KAFKA_MAX_RETRY_TIME: 30000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOGS_REPO_HOST: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/logsDB?authSource=admin
      LOGSMANAGEMENT_SERVICE_KAFKA_GROUP_ID: logs-consumers
      PLAYERS_MANAGEMENT_SERVICE_HOST: http://players-management:3000
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN}
      LOG_DATA_MIN_CHARS: 1
      LOG_DATA_MAX_CHARS: 500
      LOGSMANAGEMENT_TOKENS_PER_SECOND: 2
      LOGSMANAGEMENT_MAX_TOKENS: 5
      TOPIC_LOGS_RAW: logs.raw
      
  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - backend
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - ./utils/db/mongodb_data:/data/db
      - ./utils/db/mongod.conf:/etc/mongod.conf
    command: ["mongod", "--config", "/etc/mongod.conf"]

  redis:
    image: redis:6
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - backend

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - backend
    environment:
      KAFKA_KRAFT_MODE: 'false'
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka
    networks:
      - backend
  
  nginx-proxy:
    image: nginx
    ports:
      - "8080:8080"
    volumes:
      - ./utils/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - backend
    depends_on:
      - players-management
      - game-scores
      - leaderboard
      - log-management

networks:
  backend:
volumes:
  mongo-data:
